//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheVoid.Client.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListEngines", ReplyAction="http://tempuri.org/IService/ListEnginesResponse")]
        string[] ListEngines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListEngines", ReplyAction="http://tempuri.org/IService/ListEnginesResponse")]
        System.Threading.Tasks.Task<string[]> ListEnginesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Execute", ReplyAction="http://tempuri.org/IService/ExecuteResponse")]
        void Execute(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Execute", ReplyAction="http://tempuri.org/IService/ExecuteResponse")]
        System.Threading.Tasks.Task ExecuteAsync(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Evaluate", ReplyAction="http://tempuri.org/IService/EvaluateResponse")]
        string Evaluate(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Evaluate", ReplyAction="http://tempuri.org/IService/EvaluateResponse")]
        System.Threading.Tasks.Task<string> EvaluateAsync(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateEngines", ReplyAction="http://tempuri.org/IService/CreateEnginesResponse")]
        void CreateEngines(string engine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateEngines", ReplyAction="http://tempuri.org/IService/CreateEnginesResponse")]
        System.Threading.Tasks.Task CreateEnginesAsync(string engine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListMessages", ReplyAction="http://tempuri.org/IService/ListMessagesResponse")]
        string[] ListMessages(int lastmessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListMessages", ReplyAction="http://tempuri.org/IService/ListMessagesResponse")]
        System.Threading.Tasks.Task<string[]> ListMessagesAsync(int lastmessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : TheVoid.Client.Service.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<TheVoid.Client.Service.IService>, TheVoid.Client.Service.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public string[] ListEngines() {
            return base.Channel.ListEngines();
        }
        
        public System.Threading.Tasks.Task<string[]> ListEnginesAsync() {
            return base.Channel.ListEnginesAsync();
        }
        
        public void Execute(string engine, string command) {
            base.Channel.Execute(engine, command);
        }
        
        public System.Threading.Tasks.Task ExecuteAsync(string engine, string command) {
            return base.Channel.ExecuteAsync(engine, command);
        }
        
        public string Evaluate(string engine, string command) {
            return base.Channel.Evaluate(engine, command);
        }
        
        public System.Threading.Tasks.Task<string> EvaluateAsync(string engine, string command) {
            return base.Channel.EvaluateAsync(engine, command);
        }
        
        public void CreateEngines(string engine) {
            base.Channel.CreateEngines(engine);
        }
        
        public System.Threading.Tasks.Task CreateEnginesAsync(string engine) {
            return base.Channel.CreateEnginesAsync(engine);
        }
        
        public string[] ListMessages(int lastmessage) {
            return base.Channel.ListMessages(lastmessage);
        }
        
        public System.Threading.Tasks.Task<string[]> ListMessagesAsync(int lastmessage) {
            return base.Channel.ListMessagesAsync(lastmessage);
        }
    }
}
