//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheVoid.Client.ServiceProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Page", Namespace="http://schemas.datacontract.org/2004/07/TheVoid.CI")]
    [System.SerializableAttribute()]
    public partial class Page : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Blank1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Blank2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MuteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OctShiftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PanField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TheVoid.Client.ServiceProxy.Pattern PatternField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SoftkeysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SoloField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VolumeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TheVoid.Client.ServiceProxy.APCLED ledField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Blank1 {
            get {
                return this.Blank1Field;
            }
            set {
                if ((this.Blank1Field.Equals(value) != true)) {
                    this.Blank1Field = value;
                    this.RaisePropertyChanged("Blank1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Blank2 {
            get {
                return this.Blank2Field;
            }
            set {
                if ((this.Blank2Field.Equals(value) != true)) {
                    this.Blank2Field = value;
                    this.RaisePropertyChanged("Blank2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((this.DeviceField.Equals(value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Mute {
            get {
                return this.MuteField;
            }
            set {
                if ((this.MuteField.Equals(value) != true)) {
                    this.MuteField = value;
                    this.RaisePropertyChanged("Mute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Note {
            get {
                return this.NoteField;
            }
            set {
                if ((this.NoteField.Equals(value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OctShift {
            get {
                return this.OctShiftField;
            }
            set {
                if ((this.OctShiftField.Equals(value) != true)) {
                    this.OctShiftField = value;
                    this.RaisePropertyChanged("OctShift");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Pan {
            get {
                return this.PanField;
            }
            set {
                if ((this.PanField.Equals(value) != true)) {
                    this.PanField = value;
                    this.RaisePropertyChanged("Pan");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TheVoid.Client.ServiceProxy.Pattern Pattern {
            get {
                return this.PatternField;
            }
            set {
                if ((object.ReferenceEquals(this.PatternField, value) != true)) {
                    this.PatternField = value;
                    this.RaisePropertyChanged("Pattern");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Send {
            get {
                return this.SendField;
            }
            set {
                if ((this.SendField.Equals(value) != true)) {
                    this.SendField = value;
                    this.RaisePropertyChanged("Send");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Softkeys {
            get {
                return this.SoftkeysField;
            }
            set {
                if ((this.SoftkeysField.Equals(value) != true)) {
                    this.SoftkeysField = value;
                    this.RaisePropertyChanged("Softkeys");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Solo {
            get {
                return this.SoloField;
            }
            set {
                if ((this.SoloField.Equals(value) != true)) {
                    this.SoloField = value;
                    this.RaisePropertyChanged("Solo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Vel {
            get {
                return this.VelField;
            }
            set {
                if ((this.VelField.Equals(value) != true)) {
                    this.VelField = value;
                    this.RaisePropertyChanged("Vel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TheVoid.Client.ServiceProxy.APCLED led {
            get {
                return this.ledField;
            }
            set {
                if ((this.ledField.Equals(value) != true)) {
                    this.ledField = value;
                    this.RaisePropertyChanged("led");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pattern", Namespace="http://schemas.datacontract.org/2004/07/TheVoid.CI")]
    [System.SerializableAttribute()]
    public partial class Pattern : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool[] StepsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool[] Steps {
            get {
                return this.StepsField;
            }
            set {
                if ((object.ReferenceEquals(this.StepsField, value) != true)) {
                    this.StepsField = value;
                    this.RaisePropertyChanged("Steps");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APC.LED", Namespace="http://schemas.datacontract.org/2004/07/TheVoid.CI")]
    public enum APCLED : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Off = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreenBlink = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RedBlink = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        YellowBlink = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Client.ServiceProxy.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListEngines", ReplyAction="http://tempuri.org/IService/ListEnginesResponse")]
        string[] ListEngines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListEngines", ReplyAction="http://tempuri.org/IService/ListEnginesResponse")]
        System.Threading.Tasks.Task<string[]> ListEnginesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Execute", ReplyAction="http://tempuri.org/IService/ExecuteResponse")]
        void Execute(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Execute", ReplyAction="http://tempuri.org/IService/ExecuteResponse")]
        System.Threading.Tasks.Task ExecuteAsync(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Evaluate", ReplyAction="http://tempuri.org/IService/EvaluateResponse")]
        string Evaluate(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Evaluate", ReplyAction="http://tempuri.org/IService/EvaluateResponse")]
        System.Threading.Tasks.Task<string> EvaluateAsync(string engine, string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateEngines", ReplyAction="http://tempuri.org/IService/CreateEnginesResponse")]
        void CreateEngines(string engine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateEngines", ReplyAction="http://tempuri.org/IService/CreateEnginesResponse")]
        System.Threading.Tasks.Task CreateEnginesAsync(string engine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListMessages", ReplyAction="http://tempuri.org/IService/ListMessagesResponse")]
        string[] ListMessages(int lastmessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListMessages", ReplyAction="http://tempuri.org/IService/ListMessagesResponse")]
        System.Threading.Tasks.Task<string[]> ListMessagesAsync(int lastmessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/APCPages", ReplyAction="http://tempuri.org/IService/APCPagesResponse")]
        TheVoid.Client.ServiceProxy.Page[] APCPages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/APCPages", ReplyAction="http://tempuri.org/IService/APCPagesResponse")]
        System.Threading.Tasks.Task<TheVoid.Client.ServiceProxy.Page[]> APCPagesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : TheVoid.Client.ServiceProxy.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<TheVoid.Client.ServiceProxy.IService>, TheVoid.Client.ServiceProxy.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] ListEngines() {
            return base.Channel.ListEngines();
        }
        
        public System.Threading.Tasks.Task<string[]> ListEnginesAsync() {
            return base.Channel.ListEnginesAsync();
        }
        
        public void Execute(string engine, string command) {
            base.Channel.Execute(engine, command);
        }
        
        public System.Threading.Tasks.Task ExecuteAsync(string engine, string command) {
            return base.Channel.ExecuteAsync(engine, command);
        }
        
        public string Evaluate(string engine, string command) {
            return base.Channel.Evaluate(engine, command);
        }
        
        public System.Threading.Tasks.Task<string> EvaluateAsync(string engine, string command) {
            return base.Channel.EvaluateAsync(engine, command);
        }
        
        public void CreateEngines(string engine) {
            base.Channel.CreateEngines(engine);
        }
        
        public System.Threading.Tasks.Task CreateEnginesAsync(string engine) {
            return base.Channel.CreateEnginesAsync(engine);
        }
        
        public string[] ListMessages(int lastmessage) {
            return base.Channel.ListMessages(lastmessage);
        }
        
        public System.Threading.Tasks.Task<string[]> ListMessagesAsync(int lastmessage) {
            return base.Channel.ListMessagesAsync(lastmessage);
        }
        
        public TheVoid.Client.ServiceProxy.Page[] APCPages() {
            return base.Channel.APCPages();
        }
        
        public System.Threading.Tasks.Task<TheVoid.Client.ServiceProxy.Page[]> APCPagesAsync() {
            return base.Channel.APCPagesAsync();
        }
    }
}
